type Request @model {
  id: ID!
  dateOfRequest: String!
  firstName: String!
  lastName: String!
  address: String
  city: String!
  zipCode: Int
  phone: String
  email: String
  spanishOnly: Boolean
  preferredContactTime: String
  request: String
  leadSource: LeadSource!
  leadOtherDetails: String
  selfOrOtherInfo: SelfOrOtherInfo! @connection
  foodRequest: FoodInfo @connection
  movingRequest: MovingInfo @connection
  resumeHelp: Boolean
  coverLetterHelp: Boolean
  needReason: [NeedReason]!
  needTypes: [NeedType]!
  status: RequestStatus!
  note: String
  needFulfiller: String
  dateFulfilled: String
  followUp: String
}

type SelfOrOtherInfo @model {
  forSelf: Boolean
  usedOtherResources: Boolean
  otherResources: String
  requestFor: String
  requestIsKnown: Boolean
}

type FoodInfo @model {
  familyMembers: Int
  children: String
  haveAllergies: Boolean
  allergies: String
  groceries: Groceries @connection
}

type MovingInfo @model {
  itemCount: Int
  distance: Float
  haveTransportation: Boolean
  specialConditions: String
  liabilityAck: Boolean
}

type Groceries @model {
  milk: Boolean
  eggs: Boolean
  bread: Boolean
  tortillas: Boolean
  rice: Boolean
  beans: Boolean
  cheese: Boolean
  beef: Boolean
  hotdogs: Boolean
  lunchMeat: Boolean
  fruit: Boolean
  peanutButter: Boolean
  jelly: Boolean
}

enum RequestStatus {
  NEW
  INPROGRESS
  FULFILLED
}

enum NeedType {
  MEALS
  GROCERIES
  MOVING
  JOBTRAINING
  HOMEREPAIR
  CARREPAIR
  HOUSING
  CLOTHING
  FURNITURE
  OTHER
}

enum NeedReason {
  COVID
  ILLNESS
  FINANCIAL
}

enum LeadSource {
  REDEEMERS
  FAMILY
  FRIEND
  OTHER
}
